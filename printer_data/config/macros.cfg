# Template for gcode macros
#[gcode_macro my_cmd]
#gcode:
#   A list of G-Code commands to execute in place of "my_cmd". See
#   docs/Command_Templates.md for G-Code format. This parameter must
#   be provided.
#variable_<name>:
#   One may specify any number of options with a "variable_" prefix.
#   The given variable name will be assigned the given value (parsed
#   as a Python literal) and will be available during macro expansion.
#   For example, a config with "variable_fan_speed = 75" might have
#   gcode commands containing "M106 S{ fan_speed * 255 }". Variables
#   can be changed at run-time using the SET_GCODE_VARIABLE command
#   (see docs/Command_Templates.md for details). Variable names may
#   not use upper case characters.
#rename_existing:
#   This option will cause the macro to override an existing G-Code
#   command and provide the previous definition of the command via the
#   name provided here. This can be used to override builtin G-Code
#   commands. Care should be taken when overriding commands as it can
#   cause complex and unexpected results. The default is to not
#   override an existing G-Code command.
#description: G-Code macro
#   This will add a short description used at the HELP command or while
#   using the auto completion feature. Default "G-Code macro"


######################################################################
# MOVE UP and MOVE DOWN FOR PAUSE AND RESUME
######################################################################
[gcode_macro MOVE_UP]
description: Move down z by 5mm
gcode:
  PAUSE
  SAVE_GCODE_STATE NAME=my_move_up_state
  G91                                         # Set all axes to relative move 
  G1 Z5 F50                                   # Move the z axis up 5mm 
  RESTORE_GCODE_STATE NAME=my_move_up_state

[gcode_macro MOVE_DOWN]
description: Move down z by 5mm
gcode:
  SAVE_GCODE_STATE NAME=my_move_up_state     
  G91
  G1 Z-5 F50
  RESTORE_GCODE_STATE NAME=my_move_up_state
  RESUME

######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT. See docs/Slicers.md for more information on using these macros.

[gcode_macro START_PRINT]
gcode:
    #{% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    #{% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    #M140 S{BED_TEMP}
    #M104 S{EXTRUDER_TEMP}
    # Wait for bed to reach temperature
    #M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    #M109 S{EXTRUDER_TEMP}
    G21 ;millimeters values
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    M107 ;start with the fan off

    G28 X0 Y0 ;move X/Y to min endstops
    G28 Z0 ;move Z to min endstops
    #BED_MESH_PROFILE LOAD=default
    Bed_Mesh_Calibrate Adaptive=1
    G1 Z5.0 ;move the platform up 5mm
    G92 E0 ;zero the extruded length
    G1 F300 E5 ;extrude 5mm of feed stock
    G92 E0 ;zero the extruded length again

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0 ; set the bed off
    M104 S0 ; set the extruder off
    M107  ; set the fan off

    G92 E0.0 ;New extruder position to zero
    G1 E-5 ;retract filament
    G91  ; Set all axes to relative
    G1 Z5 F3000
    # Move nozzle away from print while retracting
    G90 ; Set all axes to absolute
    G1 X0 Y272 F3000 ; park print head
    # Disable steppers
    M84
    M300 S440 P200 ;Play tone
    #M300 S660 P250
    #M300 S880 P300
    #REMOVE_PRINT

######################################################################
# Remove Print Macro
######################################################################
[gcode_macro REMOVE_PRINT]
gcode:
    # Wait for bed to reach temperature
    M190 S43
    M300 S440 P200 ;Play tone
    M300 S660 P250
    M300 S880 P300
    M140 S0 ;SET BED TO OFF

######################################################################
# Bed Remover Macro
######################################################################
[gcode_macro Bed_Remover]
gcode:
    G28 ; Home all axes
    G90 ; Set all axes to absolute
    G1 Z10
    G1 Y260
    M84 ; Disable Motor
 ######################################################################
# Servo test Macro
######################################################################
[gcode_macro servo45]
gcode:
     SET_SERVO SERVO=my_servo ANGLE=45

[gcode_macro servo0]
gcode:
     SET_SERVO SERVO=my_servo ANGLE=0
######################################################################
# Beeper
######################################################################

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.

#[output_pin beeper]
#pin: EXP1_1

[pwm_cycle_time BEEPER_pin]
pin: EXP1_1
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
value: 0
#   Silent at power on, set to 1 if active low.
shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0


######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]
[gcode_macro T0]
gcode: 
      M117 First filament printing.
[gcode_macro T1]
gcode: 
      M600
[gcode_macro T2]
gcode: 
      M600
[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state

######################################################################
# Cancel object (aka Marlin/RRF M486 commands) support
######################################################################
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


#[gcode_button reset_button]
#pin:RESET
#   The pin on which the button is connected. This parameter must be
#   provided.
#analog_range:
#   Two comma separated resistances (in Ohms) specifying the minimum
#   and maximum resistance range for the button. If analog_range is
#   provided then the pin must be an analog capable pin. The default
#   is to use digital gpio for the button.
#analog_pullup_resistor:
#   The pullup resistance (in Ohms) when analog_range is specified.
#   The default is 4700 ohms.
#press_gcode:
     #RESTART
     #FIRMWARE_RESTART
#   A list of G-Code commands to execute when the button is pressed.
#   G-Code templates are supported. This parameter must be provided.
#release_gcode:
#   A list of G-Code commands to execute when the button is released.
#   G-Code templates are supported. The default is to not run any
#   commands on a button release.
